const should = require('should');
const expect = require('chai').expect;
const buildFilterQuery = require('../lib/buildFilterQuery')

describe('buildFilterQuery Test', () => {

  it('should build match all query when filter is empty', function () {
    let payload = {
      filter: {}
    }
    let version = 2.2;
    let query = buildFilterQuery(payload, version)
    query.query.should.have.property('match_all')
  })

  it('should build correct Sales Rank Query', function () {
    let payload = {
      filter: {
        loading: false,
        minimumRoi: {
          value: 20
        },
        minimumProfit: {
          value: 3.5
        },
        cashBackAmount: {
          value: ''
        },
        shippingFee: {
          value: ''
        },
        salesRankFilter: {
          value: 7
        },
        minimumAmazonPrice: {
          value: 1
        },
        maxBuyPriceFromSupplier: {
          value: ''
        },
        productsWithoutBuyBox: {
          state: 'off'
        },
        noAmazonOrFbaCompetition: {
          state: 'off'
        },
        fullfilmentFeesPerItem: {
          value: ''
        },
        addFbaCharges: {
          state: 'off'
        },
        addVat: {
          state: 'off'
        },
        monthOneStorageFee: {
          value: ''
        },
        sortBy: {
          selected: 'newestToOldest'
        },
        suppliers: {
          selected: 'all',
          records: {}
        },
        categories: {
          selected: 'fashion_display_on_website',
          records: {}
        },
        search: {
          selected: 'all'
        },
        textSearch: {
          value: ''
        }
      }
    }
    let version = 2.2;
    let query = buildFilterQuery(payload, version)
    query.query.should.have.property('bool')
    query.query.bool.must[1].range.should.have.property('amazon.price')
    query.query.bool.must[2].range.should.have.property('amazon.details.profit')
    query.query.bool.must[3].range.should.have.property('amazon.details.ROI')
    query.query.bool.must[4].range.should.have.property('amazon.details.salesRankPercentage')
    query.query.bool.must[4].range["amazon.details.salesRankPercentage"].lte.should.be.equal(7)
    query.query.bool.must[4].range["amazon.details.salesRankPercentage"].gt.should.be.equal(-1)
  })

  it('should build the correct matchDistance', function () {
    let payload = {
      filter: {
        "loading": false,
        "showFilter": true,
        "minimumRoi": {
          "value": 20
        },
        "minimumProfit": {
          "value": 3.5
        },
        "cashBackAmount": {
          "value": ""
        },
        "shippingFee": {
          "value": ""
        },
        "salesRankFilter": {
          "value": 7
        },
        "minimumAmazonPrice": {
          "value": 1
        },
        "stringDistance": {
          "value": 0
        },
        "maxBuyPriceFromSupplier": {
          "value": ""
        },
        "productsWithoutBuyBox": {
          "state": "off"
        },
        "thresholdFilter": {
          "state": "off"
        },
        "noAmazonOrFbaCompetition": {
          "state": "off"
        },
        "fullfilmentFeesPerItem": {
          "value": ""
        },
        "addFbaCharges": {
          "state": "on"
        },
        "addVat": {
          "state": "off"
        },
        "monthOneStorageFee": {
          "value": ""
        },
        "nominalFbaCharge": {
          "value": "5"
        },
        "coupon": {
          "value": ""
        },
        "sortBy": {
          "selected": "newestToOldest",
          "records": {
            "newestToOldest": {
              "name": "Newest To Oldest"
            },
            "oldestToNewest": {
              "name": "Oldest To Newest"
            }
          }
        },
        "suppliers": {
          "selected": "all",
          "records": {
            "www-ltdcommodities-com": {
              "name": "LTD Commodities (Custom URLs)",
              "total": 12
            }
          }
        },
        "categories": {
          "selected": "all",
          "records": {
            "UNKNOWN": {
              "name": "UNKNOWN",
              "total": 12
            }
          }
        },
        "search": {
          "selected": "5a0af2e79259aa450a7f034c"
        },
        "textSearch": {
          "value": ""
        },
        "x4Plan": "launch",
        "maximumRoi": {
          "value": 34.9
        }
      }
    }
    let version = 2.2;
    let query = buildFilterQuery(payload, version)
    console.log(JSON.stringify(query, null, 2))
    query.query.should.have.property('bool')
    query.query.bool.must[1].range.should.have.property('amazon.price')
    query.query.bool.must[2].range.should.have.property('amazon.details.profit')
    query.query.bool.must[3].range.should.have.property('amazon.details.ROI')
    query.query.bool.must[4].range.should.have.property('amazon.details.salesRankPercentage')
    query.query.bool.must[4].range["amazon.details.salesRankPercentage"].lte.should.be.equal(7)
    query.query.bool.must[4].range["amazon.details.salesRankPercentage"].gt.should.be.equal(-1)
    // TODO: Removing String Distance as not all string matched records have this value
    //   query.query.bool.must[5].range["supplier.matchDistance"].lte.should.be.equal(0)


  })

  it('should calculate the correct matchDistance from the slider value 22 should return 0.04888884', () => {
    let payload = {
      size: 10,
      start: 0,
      country: 'uk',
      filter:
        {
          loading: false,
          showFilter: true,
          minimumRoi: { value: 35 },
          minimumProfit: { value: 3.5 },
          cashBackAmount: { value: '' },
          shippingFee: { value: '' },
          salesRankFilter: { value: 7 },
          minimumAmazonPrice: { value: 1 },
          stringDistance: { value: 22 },
          maxBuyPriceFromSupplier: { value: '' },
          productsWithoutBuyBox: { state: 'off' },
          thresholdFilter: { state: 'off' },
          noAmazonOrFbaCompetition: { state: 'off' },
          fullfilmentFeesPerItem: { value: '' },
          addFbaCharges: { state: 'on' },
          addVat: { state: 'off' },
          monthOneStorageFee: { value: '' },
          nominalFbaCharge: { value: '5' },
          coupon: { value: '' },
          sortBy: { selected: 'newestToOldest', records: [Object] },
          suppliers: { selected: 'all', records: [Object] },
          categories: { selected: 'all', records: [Object] },
          search: { selected: 'all' },
          textSearch: { value: '' },
          x4Plan: 'accelerator',
          maximumRoi: { value: null }
        },
      pathname: '/results'
    };

    let version = 2.2;
    let query = buildFilterQuery(payload, version);
    expect(query.query.bool.must[4].range['supplier.matchDistance'].lte).to.equal(0.08666666666666667);
  });

  it('should calculate the correct matchDistance from the slider value 0 should return 0', () => {
    let payload = {
      size: 10,
      start: 0,
      country: 'uk',
      filter:
        {
          loading: false,
          showFilter: true,
          minimumRoi: { value: 35 },
          minimumProfit: { value: 3.5 },
          cashBackAmount: { value: '' },
          shippingFee: { value: '' },
          salesRankFilter: { value: 7 },
          minimumAmazonPrice: { value: 1 },
          stringDistance: { value: 0 },
          maxBuyPriceFromSupplier: { value: '' },
          productsWithoutBuyBox: { state: 'off' },
          thresholdFilter: { state: 'off' },
          noAmazonOrFbaCompetition: { state: 'off' },
          fullfilmentFeesPerItem: { value: '' },
          addFbaCharges: { state: 'on' },
          addVat: { state: 'off' },
          monthOneStorageFee: { value: '' },
          nominalFbaCharge: { value: '5' },
          coupon: { value: '' },
          sortBy: { selected: 'newestToOldest', records: [Object] },
          suppliers: { selected: 'all', records: [Object] },
          categories: { selected: 'all', records: [Object] },
          search: { selected: 'all' },
          textSearch: { value: '' },
          x4Plan: 'accelerator',
          maximumRoi: { value: null }
        },
      pathname: '/results'
    };

    let version = 2.2;
    let query = buildFilterQuery(payload, version);
    expect(query.query.bool.must[4].range['supplier.matchDistance'].lte).to.equal(0.05);
  });

  it('should calculate the correct matchDistance from the slider value 90 should return 0.1999998', () => {
    let payload = {
      size: 10,
      start: 0,
      country: 'uk',
      filter:
        {
          loading: false,
          showFilter: true,
          minimumRoi: { value: 35 },
          minimumProfit: { value: 3.5 },
          cashBackAmount: { value: '' },
          shippingFee: { value: '' },
          salesRankFilter: { value: 7 },
          minimumAmazonPrice: { value: 1 },
          stringDistance: { value: 90 },
          maxBuyPriceFromSupplier: { value: '' },
          productsWithoutBuyBox: { state: 'off' },
          thresholdFilter: { state: 'off' },
          noAmazonOrFbaCompetition: { state: 'off' },
          fullfilmentFeesPerItem: { value: '' },
          addFbaCharges: { state: 'on' },
          addVat: { state: 'off' },
          monthOneStorageFee: { value: '' },
          nominalFbaCharge: { value: '5' },
          coupon: { value: '' },
          sortBy: { selected: 'newestToOldest', records: [Object] },
          suppliers: { selected: 'all', records: [Object] },
          categories: { selected: 'all', records: [Object] },
          search: { selected: 'all' },
          textSearch: { value: '' },
          x4Plan: 'accelerator',
          maximumRoi: { value: null }
        },
      pathname: '/results'
    };

    let version = 2.2;
    let query = buildFilterQuery(payload, version);
    expect(query.query.bool.must[4].range['supplier.matchDistance'].lte).to.equal(0.2);
  });

  it('should calculate the correct matchDistance from the slider value 95 should return 0.6', () => {
    let payload = {
      size: 10,
      start: 0,
      country: 'uk',
      filter:
        {
          loading: false,
          showFilter: true,
          minimumRoi: { value: 35 },
          minimumProfit: { value: 3.5 },
          cashBackAmount: { value: '' },
          shippingFee: { value: '' },
          salesRankFilter: { value: 7 },
          minimumAmazonPrice: { value: 1 },
          stringDistance: { value: 95 },
          maxBuyPriceFromSupplier: { value: '' },
          productsWithoutBuyBox: { state: 'off' },
          thresholdFilter: { state: 'off' },
          noAmazonOrFbaCompetition: { state: 'off' },
          fullfilmentFeesPerItem: { value: '' },
          addFbaCharges: { state: 'on' },
          addVat: { state: 'off' },
          monthOneStorageFee: { value: '' },
          nominalFbaCharge: { value: '5' },
          coupon: { value: '' },
          sortBy: { selected: 'newestToOldest', records: [Object] },
          suppliers: { selected: 'all', records: [Object] },
          categories: { selected: 'all', records: [Object] },
          search: { selected: 'all' },
          textSearch: { value: '' },
          x4Plan: 'accelerator',
          maximumRoi: { value: null }
        },
      pathname: '/results'
    };

    let version = 2.2;
    let query = buildFilterQuery(payload, version);
    expect(query.query.bool.must[4].range['supplier.matchDistance'].lte.toFixed(2)).to.equal('0.60');
  });


})
