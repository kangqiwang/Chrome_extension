const Url = require('url')

module.exports = (country, record) => {


    var supplierDomain = _supplierName(record.url)
    var currencySymbol = country === 'uk' ? '£' : '$'

    var r = {
        id: record.id,
        supplier: {
            name: supplierDomain,
            domain: supplierDomain,
            productTitle: record.name,
            price: currencySymbol + record.price,
            url: record.url,
            dateAnalysed: record.supplierAnalysed, //TODO; This is the supplier scraped data
            image: record.image
        },
        amazon: {
            asin: record.amazon.asin,
            name: 'Amazon',
            productTitle: record.amazon.amazonName,
            price: currencySymbol + record.competitivePricing,
            image: record.amazon.amazonImage.replace('_SL75_.jpg', '_SL220_.jpg'),
            dateAnalysed: record.amazon.updated,
            category: record.category,
            url: record.amazon.amazonUrl,
            details: {
                salesRankPercentage: parseFloat(record.salesRankPercentage).toFixed(1) + '%',
                salesRank: record.salesRank,
                ROI: parseFloat(record.roi).toFixed(2) + '%',
                profit: currencySymbol + parseFloat(record.profit).toFixed(2)
            },
            dimensions: {
                weight: record.amazon.dimensions.weight.data + ' ' + record.amazon.dimensions.weight.unit,
                height: record.amazon.dimensions.height.data + ' ' + record.amazon.dimensions.height.unit,
                width: record.amazon.dimensions.width.data + ' ' + record.amazon.dimensions.width.unit,
                length: record.amazon.dimensions.length.data + ' ' + record.amazon.dimensions.length.unit
            },
            brandRestrictionResults: {
                resultCode: record.amazon.brandRestrictionResults ? record.amazon.brandRestrictionResults.resultCode : 'unchecked',
                resultMessageCode: record.amazon.brandRestrictionResults ? record.amazon.brandRestrictionResults.resultMessageCode : '',
                resultDescription: record.amazon.brandRestrictionResults ? record.amazon.brandRestrictionResults.resultDescription : ''
            },
            fees: _fees(currencySymbol, record),
            competition: _competition(currencySymbol, record.latestDelta.lowestOffers)
        },
        productChecks: {
            merchantOnly: record.allMerchant,
            hasBuyBox: record.hasBuyBox,
            fbaEstimate: record.fees && record.fees.breakdown && record.fees.breakdown.FBAFeeEstimate ? record.fees.breakdown.FBAFeeEstimate : false,
            samePrice: true,
            stock: true,
            restricted: true
        }
    }
    return r
}

const _fees = (currencySymbol, record) => {
    var f = {
        referralFee: '',
        fbaFee: '',
        totalCost: ''
    }

    if (record.fees) {
        f = {
            referralFee: currencySymbol + parseFloat(record.fees.breakdown.ReferralFee).toFixed(2),
            fbaFee: currencySymbol + parseFloat(record.fees.breakdown.FBAFees).toFixed(2),
            totalCost: currencySymbol + parseFloat(record.fees.totalFees).toFixed(2),
        }
    }

    return f

}

// TODO: We should store this in the data in the first place
const _supplierName = (url) => {
    return Url.parse(url).host;
}

const _competition = (currencySymbol, otherSellers) => {
    /**
       {
            title: "seller 4",
            channel : "Amazon or Fba",
            price: "£" + 21.00,
            feedback: 4567
        }
     */
    var result = []

    try {
        otherSellers.map((seller, index) => {
            var obj = {
                title: 'Seller ' + (index + 1),
                channel: seller.Qualifiers.FulfillmentChannel,
                price: currencySymbol + parseFloat(seller.Price.LandedPrice.Amount).toFixed(2),
                feedback: seller.SellerFeedbackCount,
                feedbackPercentage: seller.Qualifiers.SellerPositiveFeedbackRating
            }
            result.push(obj)
        })
    } catch (e) {

    }

    return result;
}
/**
 * CREATE this structure
 "prod02" : {
            supplier:{
				name: 'Asda',
				productTitle: 'Lego Star Wars',
				price: "£" + 2760.99,
				image: 'http://media.4rgos.it/s/Argos/5981887_R_SET?$Thumb220$&$Web$$'
			},

			amazon: {
                asin: 'B01GRVRNKK',
				name: 'Amazon',
				productTitle: 'Lego Stars Wars Darth Vader',
				price: "£" + 100.99,
				image: 'http://media.4rgos.it/s/Argos/5981887_R_SET?$Thumb220$&$Web$$',
                dateAnalysed: "2017-03-27T17:51:08.356Z",
                category: "Toys and Games",
				details: {
					salesRankPercentage: 23.78 + '%',
					salesRank: 213687,
					ROI: 66.99 + '%',
					profit: "£" + 100.99
				},
                dimensions: {
                    weight: 7 + "kg",
                    height: 35 +"cm",
                    width: 30 SellerPositiveFeedbackRating+"cm",
                    length: 70 +"cm"
                },
                fees : {
                    referralFee:"£" + 3.00,
                    fbaFee: "£" + 2.77,
                    totalCost: "£" + 70.88,
                    roi: 77 + "%"
                },
                competition: [
                    {
                        title: "seller 1",
                        channel : "merchant",
                        price: "£" + 21.00,
                        feedback: 4567
                    },
                    {
                        title: "seller 2",
                        channel : "Amazon or Fba",
                        price: "£" + 21.00,
                        feedback: 4567
                    },
                    {
                        title: "seller 3",
                        channel : "merchant",
                        price: "£" + 21.00,
                        feedback: 4567
                    },
                    {
                        title: "seller 4",
                        channel : "Amazon or Fba",
                        price: "£" + 21.00,
                        feedback: 4567
                    },

                ]
			}
        }
        */
