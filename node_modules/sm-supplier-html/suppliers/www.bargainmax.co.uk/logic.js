var ProductPageInfo = require('../../lib/productPageInfo.js');
var SearchPageInfo = require('../../lib/searchPageInfo.js');
var cleanName = require('../../lib/cleanName.js');
var getPrice = require('../../lib/getPrice.js');
var CategoryInfo = require('../../lib/CategoryInfo.js');
var PaginationNumberInfo = require('../../lib/paginationNumberInfo.js');
var inStockCheck = require('../../lib/inStockCheck.js')


module.exports = bargainmax = {
    "useJavascript": true,

    'sku': (url) => {
        return url.substring(url.lastIndexOf("/") + 1, url.lastIndexOf(""))
    },

    'product': function ($, next) {
        // product - Returns product information for provided url
        var info = new ProductPageInfo()
        info.name = Product.name($)
        info.inStock = Product.inStock($)
        info.price = Product.price($)
        info.image = Product.image($)
        info.country = 'uk'
        return info
    },

    'search': function ($, next) {
        // search -  Returns an array of products from the suppliers search page
        var result = []

        Search.container($).map(function (index, product) {
            var info = new SearchPageInfo()
            info.name = Search.name($, product);
            info.sku = Search.url($, product).substring(Search.url($, product).lastIndexOf("/") + 1, Search.url($, product).lastIndexOf(""));
            info.price = Search.price($, product);
            info.url = Search.url($, product);
            info.image = Search.image($, product);
            info.country = 'uk';
            result.push(info)
        });

        return result
    },
    'category': function ($, next) {
        var info = new CategoryInfo()
        info.name = Category.name($);

        return info
    },
    'pagination': function ($, next) {

        var info = new PaginationNumberInfo()
        info.items = Pagination.items($);
        info.pages = Pagination.pages($);

        return info
    }

}

var Product = {
    name: function ($) {
        var name = $('.product-name h1').text();
        name = cleanName(name);
        return name;
    },
    inStock: function ($) {
        var isInStock = true;
        
        var outofstock = $('div.add-to-box div.out-of-stock').text();
        isInStock=inStockCheck(outofstock,isInStock)
        if (outofstock !== null) {
            outofstock = outofstock.toLowerCase();
            if (outofstock.indexOf('out of stock') > -1) {
                isInStock = false
            }
        }
        return isInStock;

    },
    price: function ($) {
        var price = $('span.price').text();
        price = getPrice(price);
        return price;
    },
    image: function ($) {
        var image = $('a.js-product-image img').attr('src');
        return image;
    }
}

var Search = {
    container: function ($) {
        var searchProducts = $('li.item');
        return searchProducts;
    },
    name: function ($, product) {
        var name = $(product).find('h2.product-name a').text();
        name = cleanName(name);
        return name;
    },
    price: function ($, product) {
        var price = $(product).find('p.special-price').text();
        price = getPrice(price);
        return price;
    },
    url: function ($, product) {
        var url = null;
        var anchor = $(product).find('a');
        if (anchor) {
            url = $(anchor).attr('href');
        }
        return url;
    },

    image: function ($, product) {
        var image = $(product).find('a.product-image img').attr('src');
        return image;
    }
}
var Category = {
    name: function ($) {
        return cleanName($("div.breadcrumbs ul li strong").text());
    }
}
var Pagination = {

    items: function ($) {
        return parseInt($("div.limiter").text().match(/[0-9]+/g)[1]);
    },
    pages: function ($) {
        return Math.ceil($("p.amount strong").text().match(/[0-9]+/g)[0] / this.items($));
    }
}