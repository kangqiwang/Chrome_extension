var ProductPageInfo = require('../../lib/productPageInfo.js');
var SearchPageInfo = require('../../lib/searchPageInfo.js');
var cleanName = require('../../lib/cleanName.js');
var getPrice = require('../../lib/getPrice.js');
var PaginationNumberInfo = require('../../lib/paginationNumberInfo.js');
var CategoryInfo = require('../../lib/CategoryInfo.js');
var instockCheck = require('../../lib/inStockCheck')
module.exports = replaceWithSupplierName = {

    'product': ($) => {
        // product - Returns product information for provided url
        var info = new ProductPageInfo()
        info.name = Product.name($)
        info.inStock = Product.inStock($)
        info.price = Product.price($)
        info.image = Product.image($)
        info.country = 'uk'

        return info
    },

    'sku': (url) => {
        return url.substring(url.lastIndexOf("/")+1,url.lastIndexOf(".prd"))
    },

    'search': ($, next) => {
        // search -  Returns an array of products from the suppliers search page
        var result = []

        Search.container($).map((index, product) => {
            var info = new SearchPageInfo()
            info.name = Search.name($, product)
            info.price = Search.price($, product);
            info.url = Search.url($, product);
            info.image = Search.image($, product);
            info.country = 'uk';
            result.push(info)
        });

        return result
    },
    'pagination': ($, next) => {

        var info = new PaginationNumberInfo()
        info.items = Pagination.items($);
        info.pages = Pagination.pages($);

        return info
    },
    'category': ($) =>  {
        var info = new CategoryInfo()
        info.name = Category.name($);

        return info
    }

}

var Product = {
    name: function ($) {
        let name=$('h1.product-name').text()
        name=cleanName(name)
        return name
    },
    inStock: function ($) {
        var check =$('.stock').text()
        var inStock = true
        inStock =instockCheck(check,inStock)
        return inStock
    },
    price: function ($) {   
        let price=$('div.special-price span.price').first().text()
        price=getPrice(price)
        return price
    },
    image: function ($) {
        let image=$('div.fotorama__stage__frame img.fotorama__img').attr('src')
        return image
    },
    url: function ($) {
        return $
    }
}

var Search = {
    container: function ($) {
        let searchProduct=$('li.product-item')
        return searchProduct
    },
    name: function ($, product) {
        let name=$(product).find('strong.product-name a').text()
        name=cleanName(name)
        return name
    },
    price: function ($, product) {
        let price=$(product).find('.special-price span.price').text()
        price=getPrice(price)
        return price
    },
    url: function ($, product) {
        let url=$(product).find('strong.product-name a').attr('href')
        return url
    },

    image: function ($, product) {
        let image=$(product).find('img').attr('src')
        return image
    }
}

var Pagination = {

    items: function ($) {
        let productNumber=$('span.toolbar-number').text()
        return productNumber
    },
    pages: function ($) {
        let itempage=$('span.current').text()

        return 1;
    }
}

var Category = {
    name: function ($) {
        let category=$('ul.items li:last-child').text()
        category=cleanName(category)
        return category
    }
}

