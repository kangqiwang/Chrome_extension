var ProductPageInfo = require('../../lib/productPageInfo.js');
var SearchPageInfo = require('../../lib/searchPageInfo.js');
var cleanName = require('../../lib/cleanName.js');
var getPrice = require('../../lib/getPrice.js');
var PaginationNumberInfo = require('../../lib/paginationNumberInfo.js');
var CategoryInfo = require('../../lib/CategoryInfo.js');
let generateSku = require('../../lib/testPattern.js')
let regex = /\/([^\/]+)\/?$/


module.exports = replaceWithSupplierName = {

    'product': ($) => {
        // product - Returns product information for provided url
        var info = new ProductPageInfo()
        info.name = Product.name($)
        info.inStock = Product.inStock($)
        info.price = Product.price($)
        info.image = Product.image($)
        info.country = 'us'
        return info
    },

    'sku': (url) => {
        let sku = generateSku(url, regex)[0].match(/[^?]*/i)[0].replace(/_/g, '').match('[0-9]+')[0]
        return sku
    },

    'search': ($, next) => {
        // search -  Returns an array of products from the suppliers search page
        var result = []

        Search.container($).map((index, product) => {
            var info = new SearchPageInfo()
            info.name = Search.name($, product);
            info.sku = generateSku(Search.url($, product), regex)[0].match(/[^?]*/i)[0].replace(/_/g, '').match('[0-9]+')[0]
            info.price = Search.price($, product);
            info.url = Search.url($, product);
            info.image = Search.image($, product);
            info.country = 'us';
            result.push(info)
        });
        return result
    },
    'pagination': ($, next) => {

        var info = new PaginationNumberInfo()
        info.items = Pagination.items($);
        info.pages = Pagination.pages($);

        return info
    },
    'category': ($) => {
        var info = new CategoryInfo()
        info.name = Category.name($);

        return info
    }

}

var Product = {
    name: function ($) {
        var name = $('h1').first().text()
        name = cleanName(name)
        return name;
    },
    inStock: function ($) {
        return 'unchecked';
    },
    price: function ($) {
        let salePrice = getPrice($('.product-sale-price').text())
        let saleSkuPrice = getPrice($('.sku-sale-price').text())
        let stdPrice = getPrice($('div.product-list-price').text());

        if (salePrice && salePrice != '') {
            return salePrice
        } else if (saleSkuPrice && saleSkuPrice != '') {
            return saleSkuPrice
        } else {
            return stdPrice
        }
    },
    image: function ($) {
        var image = $('img.item-image').attr('src');
        return 'https:' + image;
    },
    url: function ($) {
        return $;
    }
}

var Search = {
    container: function ($) {
        var searchProducts = $('div.product-detail-container');
        return searchProducts;
    },
    name: function ($, product) {
        var name = $(product).find('h3.product-name').text();
        name = cleanName(name);
        return name;
    },
    price: function ($, product) {
        var price = $(product).find('.product-sale-price').text();
        price = getPrice(price);
        return price;
    },
    url: function ($, product) {
        var url = null;
        var anchor = $(product).find('a');
        if (anchor) {
            url = $(anchor).attr('href');
        }
        return 'https://www.ae.com' + url;
    },
    image: function ($, product) {
        var image = $(product).find('img').attr('data-image-hover')
        return 'https:' + image;
    }
}

var Pagination = {

    items: function ($) {
        var items = $('span.filter-item-count');
        if (!items) {
            items = items.replace(/\d/g, "");
        }
        return parseInt(items);

    },
    pages: function ($) {
        return 1;
    }
}

var Category = {
    name: function ($) {
        var name = $('div.main-breadcrumb h1').text()
        name = cleanName(name);
        return name;
    }
}