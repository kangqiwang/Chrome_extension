const expect = require('chai').expect;
const Affiliate = require('../model/affiliate');
const config = require('../config.js');
const mongodb = require('mongodb');

describe('#The Affiliate Model', () => {

    let affiliate;
    let testRecord;

    beforeEach(() => {
        affiliate = new Affiliate(config.mongoDb);
    });

    after((done) => {
        affiliate.remove({ email: 'test@testing.com' }, () => {
            done();
        });
    });

    describe(':structure:', () => {
        it('should have a method to add a new affiliate', () => {
            expect(affiliate).to.have.property('addAffiliate');
            expect(affiliate.addAffiliate).to.be.a('function');
        });
        it('should have a method to update an affiliate', () => {
            expect(affiliate).to.have.property('updateAffiliate');
            expect(affiliate.updateAffiliate).to.be.a('function');
        });
        it('should have a method to find an affiliate by email address', () => {
            expect(affiliate).to.have.property('findByEmail');
            expect(affiliate.findByEmail).to.be.a('function');
        });
    });

    describe('#addAffiliate', () => {
        it('should return an error if passed an incomplete affiliate record', (done) => {
            affiliate.addAffiliate({}, (err) => {
                expect(err).to.equal('INVALID_AFFILIATE');
                done();
            });
        });
        it('should not return an error when passed a valid affiliate record', (done) => {
            let testData = {
                email: 'test@testing.com',
                first_name: 'test',
                last_name: 'test',
                country: 'UK',
                currency: 'GBP'
            };
            affiliate.addAffiliate(testData, (err) => {
                expect(err).to.equal(null); // check it exists in the next test...
                done();
            });
        });
    });

    describe('#findByEmail', () => {
        it('should return an affiliate record when the email address matches an affiliate record', (done) => {
            affiliate.findByEmail({ email: 'test@testing.com' }, (err, data) => {
                expect(err).to.equal(null);
                expect(data).to.have.property('first_name');
                expect(data.first_name).to.equal('test');
                expect(data.updated_at).to.equal(null);
                testRecord = data; // save this to compare later
                done();
            });
        });
        it('should return an empty object when the email address does not match an affiliate record', (done) => {
            affiliate.findByEmail({ email: 'xxx' }, (err, data) => {
                expect(err).to.equal(null);
                expect(data).to.be.a('object');
                expect(data).to.not.have.property('first_name');
                done();
            });
        });
    });

    describe('#updateAffiliate', () => {
        it('should return an error if an update object has not been provided', (done) => {
            affiliate.updateAffiliate({}, (err) => {
                expect(err).to.equal('INVALID_AFFILIATE');
                done();
            });
        });
        it('should not return an error if provided with a valid request', (done) => {
            let testId = new mongodb.ObjectId(testRecord.id);
            let testData = {
                query: { _id: testId },
                update: { $set: { last_name: 'mogul' } }
            };
            affiliate.updateAffiliate(testData, (err) => {
                expect(err).to.equal(null);
                done();
            });
        });
        it('should have updated the record', (done) => {
            affiliate.findByEmail({ email: 'test@testing.com' }, (err, data) => {
                expect(data.last_name).to.equal('mogul');
                done();
            });
        });
        it('should have updated the updated_at timestamp', (done) => {
            affiliate.findByEmail({ email: 'test@testing.com' }, (err, data) => {
                expect(data.updated_at).to.not.equal(testRecord.updated_at);
                done();
            });
        });
    });

    describe('#getAllAffiliateCodes', () => {
        it('should return all afiliate codes', (done) => {
            affiliate.getAllAffiliates({}, (err, results) => {
                expect(err).to.equal(null);
                console.log(results)
                done();
            });
        });
    })
});
