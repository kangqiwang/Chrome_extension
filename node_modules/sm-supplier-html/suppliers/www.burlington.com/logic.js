var ProductPageInfo = require('../../lib/productPageInfo.js');
var SearchPageInfo = require('../../lib/searchPageInfo.js');
var cleanName = require('../../lib/cleanName.js');
var getPrice = require('../../lib/getPrice.js');
var PaginationNumberInfo = require('../../lib/paginationNumberInfo.js');
var CategoryInfo = require('../../lib/CategoryInfo.js');

module.exports = replaceWithSupplierName = {

    'product': function ($, next) {
        // product - Returns product information for provided url
        var info = new ProductPageInfo()
        info.name = Product.name($)
        info.inStock = Product.inStock($)
        info.price = Product.price($)
        info.image = Product.image($)
        info.country = 'us'

        return info
    },
    'search': function ($, next) {
        // search -  Returns an array of products from the suppliers search page
        var result = []

        Search.container($).map(function (index, product) {
            var info = new SearchPageInfo()
            info.name = Search.name($, product)
            info.price = Search.price($, product);
            info.url = Search.url($, product);
            info.image = Search.image($, product);
            info.country = 'us';
            result.push(info)
        });

        return result
    },
    'pagination': function ($, next) {

        var info = new PaginationNumberInfo()
        info.items = Pagination.items($);
        info.pages = Pagination.pages($);

        return info
    },
    'category': function ($, next) {
        var info = new CategoryInfo()
        info.name = Category.name($);

        return info
    }

}

var Product = {
    name: function ($) {
        var name = $('div.mm_name_descr h1').text();
        name = cleanName(name);
        return name;

    },
    inStock: function ($) {
        var availabilty = $('div.btn.add-to-cart')
        var isInstock= false
        if (availabilty){
            
                isInstock=true
            
        }
	return isInstock;

    },
    price: function ($) {
        var price = $('div.price').text();
        price = getPrice(price);
        return price;

    },
    image: function ($) {
        var image = $("div.productMainImageContainer img#productMainImage").attr('src');
        (image)
        return image;
    }
}

var Search = {
    container: function ($) {
        var searchProducts = $('div.product-item.col-md-3');
        return searchProducts;

    },
    name: function ($, product) {
        
        var name = $(product).find('a.product-title.clearfix h2').text();
        name = cleanName(name);
        return name;

    },
    price: function ($, product) {
        var price = $(product).find('span.product-price.block').text();
        price = getPrice(price);
        if(price)
        {
            return price
        }else{
            price= $(product).find('.textPrice').text()
            price= getPrice(price)
            return price
        }

    },
    url: function ($, product) {
        var url = null;
        var anchor = $(product).find('a.product-title.clearfix');
        if(anchor) {
            url = $(anchor).attr('href');
        }
        return 'https://www.burlington.com/b/' + url;

    },

    image: function ($, product) {
        var image = $(product).find('a.image img').attr('src');
        return image;
    }
}

var Pagination = {

    items: function ($) {
    },
    pages: function ($) {
        return 1;
    }
}

var Category = {
    name: function ($) {
        return cleanName($("div.new-plp-carousel h1").text());
    }
}

