const handle = require('../lib/es/handle');

class Elastic {

    constructor(config) {
        this.config = config;
    }

    search(query, next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err);
            } else {
                db.search(query, (err, result) => {
                    next(err, result);
                });

            }
        });
    }

    updateByQuery(payload, next) {

        handle(this.config, (err, db) => {
            if(err) {
                next(err)
            } else {
                db.updateByQuery({
                    index: payload.index,
                    type: payload.type,
                    conflicts: 'proceed',
                    body: {
                        "query": payload.body,
                        "script": {
                            "source": payload.theScript
                        }
                    }
                }, (err, result) => {
                    next(err, result)
                })
            }
        })
    }

    count(payload, next) {
        handle(this.config, (err, db) => {
            if(err) {
                next(err)
            } else {
                db.count(payload, (err, result) => {
                    next(err, result)
                })
            }
        })
    }

    deleteByQuery(payload, next) {
        handle(this.config, (err, db) => {
            if(err) {
                next(err)
            } else {
                db.deleteByQuery({
                    index: payload.index,
                    type: payload.type,
                    conflicts: 'proceed',
                    body: payload.body
                }, (err, result) => {
                    next(err, result)
                })
            }
        })
    }

    reindex(payload, next) {
        handle(this.config, (err, db) => {
            if(err) {
                next(err)
            } else {
                db.reindex(payload, (err, result) => {
                    next(err, result)
                })
            }
        })
    }

    deleteIndex(payload, next) {
        handle(this.config, (err, db) => {
            if(err) {
                next(err)
            } else {
                db.indices.delete(payload, (err, result) => {
                    next(err, result)
                })
            }
        })
    }

    scroll(query, next) {
        if(!query.scroll_id) {
            next('NO_SCROLL_ID')
        } else {
            handle(this.config, (err, db) => {
                if (err) {
                    next(err);
                } else {
                    db.scroll(query, (err, result) => {
                        next(err, result);
                    });
                }
            });
        }

    }


    searchScroll(query, processScroll, next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err);
            } else {
                db.search(query, (err, data) => {
                    if(err) {
                        next(err)
                    } else {
                        processScroll(data, () => {
                            this._nextScroll(db, data.hits.hits.length, {
                                scroll_id: data._scroll_id,
                                scroll: query.scroll
                            }, processScroll, next);
                        })
                    }
                });

            }
        });
    }

    _nextScroll(db, length, payload, processScroll, next) {

        if (length > 0) {
            this.scroll(payload, (err, data) => {
                if (err) {
                    next(err)
                } else {
                    processScroll(data, () => {
                        this._nextScroll(db, data.hits.hits.length, payload, processScroll, next);
                    })
                }
            })
        } else {
            let clearScrollPayload = { scrollId: payload.scroll_id };
            db.clearScroll(clearScrollPayload, (err) => {
                if(err) {
                    console.error(err)
                }
                next(null)
            });
        }
    }


    bulk(data, next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err);
            } else {
                db.bulk({body: data}, (err) => {
                    next(err);
                })
            }
        })
    }
    
    mGet(query, next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err);
            } else {                
                db.mget(query, (err, data) => {
                    next(err, data);
                });
            }
        });
    }

    snapshot(payload, next) {
        
        handle(this.config, (err, db) => {
            if (err) {        
                next(err);
            } else {                
                db.snapshot.create(payload, (err, data) => {                    
                    next(err, data);
                });
            }
        });
    }

}

module.exports = Elastic;
