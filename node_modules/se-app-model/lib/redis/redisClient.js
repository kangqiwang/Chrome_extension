/**
 * Name:        Wrapper for Redis Client
 * Description: Provide a wrapper for the redis client
 * Author:      Dunc
 */

let redis = require('redis');

class RedisClient  {
  constructor(config){
    this.redisClient = redis.createClient(config);
  }

  /**
   * Pass in a key and value to store them in redis
   */
  set(key, value, cb) {
    if (key && (key + '').length) {
      this.redisClient.set(key, JSON.stringify(value));
      cb(null);
    } else {
      cb('Invalid Key 1');
    }
  }

  /**
   * Pass a key and a callback to recover a value.
   * Returned cb should expect (err, value)=>{}
   */
  get(key, cb) {
    if (key && (key + '').length) {
      this.redisClient.get(key, (err, data) => {
        cb(err, JSON.parse(data));
      });
    } else {
      cb('Invalid Key');
    }
  }

  /**
   * Return all the keys in the queue starting with the key-prefix
   */
  keys(key, cb) {
    this.redisClient.keys(key + '*', cb);
  }

  /**
   * Remove a key from the redis queue
   * @param key   string
   * @param cb    function
   * @returns     cb(err, data)
   */
  del(key, cb) {
    if (key && (key + '').length) {
      this.redisClient.del(key);
      cb(null);
    } else {
      cb('Invalid Key');
    }
  }

}

module.exports = RedisClient;
