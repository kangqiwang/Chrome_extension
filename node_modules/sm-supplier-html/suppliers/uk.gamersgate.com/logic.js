var ProductPageInfo = require ('../../lib/productPageInfo.js');
var SearchPageInfo = require ('../../lib/searchPageInfo.js');
var PaginationNumberInfo = require  ('../../lib/paginationNumberInfo.js');
var CategoryInfo = require ('../../lib/CategoryInfo.js');
var cleanName = require('../../lib/cleanName.js');
var getPrice = require('../../lib/getPrice.js');

module.exports = replaceWithwebAddressChangeToCamelCase =  {

    'sku': (url) => {
        return url.substring(url.lastIndexOf(".com/")+5,url.lastIndexOf("/"))
    },

    'product' : function($, next) {
        // product - Returns product information for provided url
        var info  = new ProductPageInfo()
        info.name = Product.name($)
        info.inStock = Product.inStock($)
        info.price = Product.price($)
        info.image = Product.image($)
        info.country = 'uk'
        info.description = Product.description($)

        return info
    },

    'search' : function($, next) {
        // search -  Returns an array of products from the suppliers search page
        var result = []

        Search.container($).map(function(index, product) {
            var info = new SearchPageInfo()
            info.name = Search.name($, product);
            info.sku = Search.url($, product).substring(Search.url($, product).lastIndexOf(".com/")+5,Search.url($, product).lastIndexOf("/"));
            info.price = Search.price($, product);
            info.url = Search.url($, product);
            info.image = Search.image($, product);
            info.country = 'uk';
            result.push(info)
        });

        return result
    },

    'pagination' : function ($, next) {

        var info = new PaginationNumberInfo()
        info.items = Pagination.items($);
        info.pages = Pagination.pages($);

        return info
    },

    'category' : function($, next) {
        var info = new CategoryInfo()
        info.name = Category.name($);

        return info
    }
}

var Product = {
    name: function($) {
        var name = $('span[itemprop="name"]').text();
        var platform = $('ul#PP_gs_list_facts li.clearfix').eq(0).text();

        if(platform !== "") {
            platform = platform.split(':').pop();
        }
        name = name + ' ' + platform;
        name = cleanName(name);
        return name;
    },
    inStock: function($) {
return 'unchecked'
},
    price: function($) {
        var price = $('div.price_price').text();
        price = getPrice(price);
        return price;
    },
    image: function($) {
        var image = $('img[itemprop="image"]').attr('src');
        return 'https://uk.gamersgate.com' + image;
    },
    description: function($) {
        var description = $('div#PP_gs_info').text();
        if(description !== null) {
            return description.replace(/(\r\n|\n|\r)/gm,"");
        }
    }
}

var Search = {
    container: function($) {
        var searchProducts = $('div#ProductBrowser .product_display');
        return searchProducts;
    },
    name: function($, product) {
        var name = $(product).find('div.descr_cont a').attr('title');
        name = cleanName(name);
        return name;
    },
    price: function($, product) {
        var price = $(product).find('span.prtag').text();
        price = getPrice(price);
        return price;
    },
    url: function($, product) {
        var url = $(product).find('div.descr_cont a').attr('href');
        return url;
    },
    image: function($, product) {
        var image = $(product).find('div.box_cont img').attr('src');
        return image;
    }
}

var Pagination = {

     items: function($) {
        return parseInt($('div#ProductBrowser .product_display').length)
     },
     pages: function($) {
        var items = $('div#ProductBrowser .product_display');
        numitems = items.length;

        var products = $('h2.header_wide .small').text();
        if(products.indexOf(' ') > -1) {
        products = products.replace(" ", "")
    }      
        if(products !== null) {
        products = products.match(/[0-9]+/g).pop();
    }

        var sum = products / numitems;
        return Math.ceil(sum);

     }
}

var Category = {
    name: function($) {
        var name = $('h2.header_wide').text();
        name = name.split('-').shift();
        name = cleanName(name);
        return name;
    }
}
