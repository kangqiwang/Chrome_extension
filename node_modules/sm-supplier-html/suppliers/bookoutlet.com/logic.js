var ProductPageInfo = require ('../../lib/productPageInfo.js');
var SearchPageInfo = require ('../../lib/searchPageInfo.js');
var PaginationNumberInfo = require  ('../../lib/paginationNumberInfo.js');
var cleanName = require('../../lib/cleanName.js');
var getPrice = require('../../lib/getPrice.js');
var CategoryInfo = require ('../../lib/CategoryInfo.js');

module.exports = replaceWithwebAddressChangeToCamelCase =  {

    'sku': (url) => {
        return url.substring(url.lastIndexOf("s/")+2,url.lastIndexOf("/"))
    },

    'product' : function($, next) {
        // product - Returns product information for provided url
        var info  = new ProductPageInfo()
        info.name = Product.name($)
        info.inStock = Product.inStock($)
        info.price = Product.price($)
        info.image = Product.image($)
        info.country = 'us'
        info.description = Product.description($)

        return info
    },

    'search' : function($, next) {
        // search -  Returns an array of products from the suppliers search page
        var result = []

        Search.container($).map(function(index, product) {
            var info = new SearchPageInfo()
            info.name = Search.name($, product);
            info.sku = Search.url($, product).substring(Search.url($, product).lastIndexOf("s/")+2,Search.url($, product).lastIndexOf("/"));
            info.price = Search.price($, product);
            info.url = Search.url($, product);
            info.image = Search.image($, product);
            info.country = 'us';
            result.push(info)
        });

        return result
    },

    'pagination' : function ($, next) {

        var info = new PaginationNumberInfo()
        info.items = Pagination.items($);
        info.pages = Pagination.pages($);

        return info
    },
    'category' : function($, next) {
        var info = new CategoryInfo()
        info.name = Category.name($);

        return info
    }
}

var Product = {
    name: function($) {
        return cleanName($("div.col-md-8 h2").text());
    },
    inStock: function($) {
return 'unchecked'
},
    price: function($) {
        return getPrice($("dl.dl-horizontal dd span").text());
    },
    image: function($) {
        return $("div.col-md-3 img").attr("src");

    },
    description: function($) {
        return $('div.row div[itemprop="description"]').text().trim();
    }
}

var Search = {
    container: function($) {
        return $("div.grid-item");
    },
    name: function($, product) {
        var abb = $(product).find("div.caption abbr").attr("title");
        var strg = cleanName($(product).find("div.caption p strong").text());

        if(abb) {
            return abb;
        } else {
            return strg;
        }
    },
    price: function($, product) {
        return getPrice($(product).find("div.price").text());
    },
    url: function($, product) {
        return "http://bookoutlet.com" + $(product).find("div.grid-image a").attr("href");
    },
    image: function($, product) {
        return $(product).find("div.grid-image img").attr("src");
    }
}

var Pagination = {

     items: function($) {
        var items = $("div.pull-right option").last().text()
        if(items) {
             items = items.match(/[0-9]+/g)[0];
        return items;
        }
     },
     pages: function($) {
        var pages = $("div.col-md-12 p strong").text();
        
        if(pages) {
             pages = pages.match(/[0-9]+/g)[1];
        return pages;
        }
     }
}


var Category = {
    name: function($) {
        var name = $('div.panel-collapse div.checkbox input:checked')[0].next.data;
        name = cleanName(name);
        return name;
    }
}

