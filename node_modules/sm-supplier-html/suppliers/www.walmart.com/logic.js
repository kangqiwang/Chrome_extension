var ProductPageInfo = require('../../lib/productPageInfo.js');
var SearchPageInfo = require('../../lib/searchPageInfo.js');
var cleanName = require('../../lib/cleanName.js');
var getPrice = require('../../lib/getPrice.js');
var PaginationNumberInfo = require('../../lib/paginationNumberInfo.js');
var CategoryInfo = require('../../lib/CategoryInfo.js');

function checkSKU(str) {
    let sku;
    if (str.indexOf('?') > -1) {
        sku = str.split('?')[0]
    } else {
        sku = str
    }
    let rx = !/\D/.test(sku);

    if (rx == true) {
        return sku
    } else {
        return -1
    }
}

module.exports = replaceWithSupplierName = {

    'product': function ($, next) {
        // product - Returns product information for provided url
        var info = new ProductPageInfo()
        info.name = Product.name($)
        info.inStock = Product.inStock($)
        info.price = Product.price($)
        info.image = Product.image($)
        info.country = 'us'

        return info
    },

    'sku': (url) => {
        return checkSKU(url.substring(url.lastIndexOf("/") + 1, url.lastIndexOf("")))
    },

    'search': function ($, next) {
        // search -  Returns an array of products from the suppliers search page
        var result = []

        let skuError = 0

        Search.container($).map(function (index, product) {
            var info = new SearchPageInfo()

            let sku = Search.url($, product).substring(Search.url($, product).lastIndexOf("/") + 1, Search.url($, product).lastIndexOf(""))

            info.name = Search.name($, product)
            info.price = Search.price($, product);
            info.sku = checkSKU(sku)
            info.url = Search.url($, product);
            info.image = Search.image($, product);
            info.country = 'us';

            if (info.sku < 0) {
                skuError++
            } else(
                result.push(info)
            )
        });

        ('SKU error count: ' + skuError)
        return result
    },
    'pagination': function ($, next) {

        var info = new PaginationNumberInfo()
        info.items = Pagination.items($);
        info.pages = Pagination.pages($);

        return info
    },
    'category': function ($, next) {
        var info = new CategoryInfo()
        info.name = Category.name($);

        return info
    }

}

var Product = {
    name: function ($) {
        let name = $('h1').attr('content')
        return name

    },
    inStock: function ($) {

        var inStock = true;
        var checkstock = $('span.copy-mini').text();
        var preorder = $('button.btn-primary').text();
        var itemavailability = $('div.prod-BotRow').html();
        let outOfStock = $('.display-block-xs').text().toLowerCase()

        var refurbished = $('div.product-short-description').html();
        var refurbished2 = $('h1[itemprop*="name"] span').html();

        if (checkstock !== null) {
            checkstock = checkstock.toLowerCase();
            if (checkstock.indexOf('out of stock') > -1) {
                inStock = false;
            }
        }
        if (preorder !== null) {
            preorder = preorder.toLowerCase();
            if (preorder.indexOf('preorder') > -1) {
                inStock = false;
            }
        }
        if (itemavailability !== null) {
            itemavailability = itemavailability.toLowerCase();
            if (itemavailability.indexOf('this item is no longer available') > -1) {
                inStock = false;
            }
        }
        if (refurbished !== null) {
            refurbished = refurbished.toLowerCase();
            if (refurbished.indexOf('refurbished') > -1) {
                inStock = false;
            }
        }
        if (refurbished2 !== null) {
            refurbished2 = refurbished2.toLowerCase();
            if (refurbished2.indexOf('refurbished') > -1) {
                inStock = false;
            }
        }

        if (outOfStock.indexOf('out of stock') > -1) {
            inStock = false;
        }

        return inStock

    },
    price: function ($) {
        let dollar = $('.hf-Bot .price-characteristic').html()
        let cent = $('.hf-Bot .price-mantissa').html()
        price = getPrice(dollar + "." + cent);
        return price

    },
    image: function ($) {
        var image = $('img').attr('src');

        if (image.startsWith('http')) {
            return image
        } else {
            return 'https:' + image
        }
    },
    url: function ($) {

    }
}

var Search = {
    container: function ($) {
        let container = $('li.Grid-col')
        return container

    },
    name: function ($, product) {
        let name = $(product).find('a.product-title-link').attr('title')
        name = cleanName(name)
        return name

    },
    price: function ($, product) {
        let dollar = $(product).find('span.price-group span.price-characteristic').html()
        let cent = $(product).find('span.price-group span.price-mantissa').html()
        let price = getPrice(dollar + '.' + cent)
        return price

    },
    url: function ($, product) {
        let url = 'https://www.walmart.com' + $(product).find('a').attr('href')
        return url

    },

    image: function ($, product) {
        let image = $(product).find('img').attr('src')
        if (image) {
            if (image.startsWith('http')) {
                return image
            } else {
                return 'https:' + image
            }
        }
    }
}

var Pagination = {

    items: function ($) {},
    pages: function ($) {
        return 1;
    }
}

var Category = {
    name: function ($) {}
}