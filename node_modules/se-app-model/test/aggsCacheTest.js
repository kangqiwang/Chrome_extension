const expect = require('chai').expect;
const aggsCache = require('../lib/aggsCache');
const config = require('../config');
const country = 'uk';
const ProductModel = require('../model/product');
const model = new ProductModel(config.es, country);

describe('#AggsCache:', () => {

    let payload;

    beforeEach(() => {
        payload = {
            query: {
                "size": 0,
                "aggs": {
                    "last_day": {
                        "filter": {
                            "range": {
                                "updated": {
                                    "gte": "now-10d/d"
                                }
                            }
                        },
                        "aggs": {
                            "amazonCategory": {
                                "terms": {
                                    "field": "category.keyword"
                                }
                            }
                        }
                    }
                }
            },
            cacheAgeUnits: 'minutes',
            cacheAgeValue: '10',
            country: 'uk'
        };
        model.collection = country + '-*, -' + country + '-www-amazon-' + (country === 'uk' ? 'co-uk' : 'com') + ',-' + country + '-stats*';
    });

    it('should read categories from the database...', (done) => {
        aggsCache(model, payload, (err, data) => {
            expect(err).to.equal(null);
            expect(data).to.have.property('timeStamp');
            expect(Object.keys(data.aggs).length).to.be.above(2);
            done();
        });
    });

});
