const expect = require('chai').expect;
const UserModel = require('../index.js').model.user;
const config = {
    db: "sm",
    host: "127.0.0.1",
    port: 27017
};


describe('setting the expiry date', () => {

    let user;
    let oldDateEpoch = '1519728282';
    let futureDateEpoch = '2520331164';

    beforeEach(() => {
        user = new UserModel(config);
    });

    it('should allow the expiry date to be set in the future', (done) => {
        let payload = {
            userId: '5a8b1745a7d4b013785fc5dd',
            expiryDate: futureDateEpoch
        };
        user.setExpiryDate(payload, (err, result) => {
            //console.log('result: ', JSON.stringify(result, null, 2));
            expect(err).to.equal(null);
            expect(result.result.ok).to.equal(1);
            done();
        });
    });

    it('should have set the expiryDate', (done) => {
        user.findById('5a8b1745a7d4b013785fc5dd', (err, result) => {
            //console.log('result: ', JSON.stringify(result, null, 2));
            let testDate = new Date(0);
            testDate.setUTCSeconds(futureDateEpoch);
            let expiryDate = new Date(result.expiryDate);
            expect(result).to.have.property('expiryDate');
            expect(expiryDate.toISOString()).to.equal(testDate.toISOString());
            done();
        });
    });

    it('should allow checkPassword to return a success when the expiry date in in the future', (done) => {
        user.checkPassword('duncan', 'password', (err, result) => {
            //console.log('result: ', JSON.stringify(result, null, 2));
            expect(err).to.equal(null);
            expect(result.username).to.equal('duncan');
            done();
        });
    });

    it('should allow the expiryDate to be set in the past', (done) => {
        let payload = {
            userId: '5a8b1745a7d4b013785fc5dd',
            expiryDate: oldDateEpoch
        };
        user.setExpiryDate(payload, (err, result) => {
            //console.log('result: ', JSON.stringify(result, null, 2));
            expect(err).to.equal(null);
            expect(result.result.ok).to.equal(1);
            done();
        });
    });

    it('should return error USER_NOT_FOUND when the expiry date has expired', (done) => {
        user.checkPassword('duncan', 'password', (err) => {
            expect(err).to.equal('USER_NOT_FOUND');
            done();
        });
    });

});
