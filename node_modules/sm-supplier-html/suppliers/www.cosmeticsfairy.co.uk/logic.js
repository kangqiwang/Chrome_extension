var ProductPageInfo = require('../../lib/productPageInfo.js');
var SearchPageInfo = require('../../lib/searchPageInfo.js');
var cleanName = require('../../lib/cleanName.js');
var getPrice = require('../../lib/getPrice.js');
var PaginationNumberInfo = require('../../lib/paginationNumberInfo.js');
var CategoryInfo = require('../../lib/CategoryInfo.js');

module.exports = replaceWithSupplierName = {

    'product': ($) => {
        // product - Returns product information for provided url
        var info = new ProductPageInfo()
        info.name = Product.name($)
        info.inStock = Product.inStock($)
        info.price = Product.price($)
        //info.image = Product.image($)
        info.country = 'uk'

        return info
    },

    'sku': (url) => {
        return url.substring(url.lastIndexOf("/")+1,url.lastIndexOf(".prd"))
    },

    'search': ($) => {
        // search -  Returns an array of products from the suppliers search page
        var result = []

        Search.container($).map((index, product) => {
            var info = new SearchPageInfo()
            info.name = Search.name($, product)
            info.price = Search.price($, product);
            info.url = Search.url($, product);
            //info.image = Search.image($, product);
            info.country = 'uk';
            result.push(info)
        });

        return result
    },
    'pagination': ($, next) => {

        var info = new PaginationNumberInfo()
        info.items = Pagination.items($);
        info.pages = Pagination.pages($);

        return info
    },
    'category': ($) =>  {
        var info = new CategoryInfo()
        info.name = Category.name($);

        return info
    }
}

var Product = {
    name: function ($) {
        var name = $('div.product-name h1').text();
        ('this is name',name)
        name = cleanName(name);
        return name;
    },
    inStock: function ($) {
	    return 'unchecked';
    },
    price: function ($) {
        price = $('span.regular-price span').text();
        price = getPrice(price);
        return price;
    },
    /*
    image: function ($) {
        var image = $('div.product-images a#product-zoom').attr('href');
        return 'https://www.etundra.com' + image;
    },
    sku:function($){
        var skunumber=$('h6 span').text()
        return skunumber
    }
    */
}

var Search = {
    container: function ($) {
        let container=$('li.item')
        return container
    },
    name: function ($, product) {
        var brand = $(product).find('h2.product-name a').attr('title');
        if(brand!=null && isNaN(brand)){
            brand = cleanName(brand);
        }
        return brand;

    },
    price: function ($, product) {
        var Special_price = $(product).find('p.special-price span.price').text();
        var price = $(product).find('span.regular-price span.price').text();
        Special_price=getPrice(Special_price) 
        var matches = Special_price.match(/\d+/g);
        if(matches){
            price=getPrice(Special_price)    
        }else{
            price=getPrice(price)
        }
        
        return price;

    },
    
    url: function ($, product) {
        var url = $(product).find('h2.product-name a').attr('href');
        return url;
    },
/*
    image: function ($, product) {
        var image = $(product).find('div.product-image-holder a').attr('href');
        return image;
    },
  */  
}

var Pagination = {

    items: function ($) {

        var items=$('div.limiter select option:nth-last-child(2)').text().trim()
        (items)
        return items;

    },
    pages: function ($) {
        var page=$('div.pages ol li').length
        
        
        return (Number(page)-1).toString();
    }
}

var Category = {
    name: function ($) {
        var name = $('div.breadcrumbs ul li:last-child').text();
        name = cleanName(name);
        return name;

    }
}

