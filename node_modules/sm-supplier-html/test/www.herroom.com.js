var should = require('should');
var Structure = require('../lib/structure.js')
const cache = require('../lib/cache')

describe('replaceWithDomainName', function () {

    describe('In Stock Page', function () {

        var payload = {
            "pageType": "product",
            "url": "https://www.herroom.com/munki-munki-m01716-plush-hooded-onesie-with-penguins.shtml",
            "html": cache.load("https://www.herroom.com/munki-munki-m01716-plush-hooded-onesie-with-penguins.shtml")
        }

        it('should be true when product is in stock', function () {
            
            const inStockPage =  Structure(payload) 
            console.log(inStockPage)           
            inStockPage.name.should.be.equal("");
            inStockPage.price.should.be.equal("");
            inStockPage.url.should.be.equal("");
            inStockPage.inStock.should.be.equal(true);
            should(inStockPage.stockLevel).be.equal(null);
            inStockPage.image.should.be.equal('');
            inStockPage.country.should.be.equal('');            
         });
 
 
    });

    xdescribe('Out of Stock Page', function () {

        var payload = {
            "pageType": "product",
            "url": "",
            "html": cache.load("")
        }

        
        it('should be true when product is in stock', function () {
            
            const inStockPage =  Structure(payload)            
            inStockPage.name.should.be.equal("");
            inStockPage.price.should.be.equal("");
            inStockPage.url.should.be.equal("");
            inStockPage.inStock.should.be.equal(true);
            should(inStockPage.stockLevel).be.equal(null);
            inStockPage.image.should.be.equal('');
            inStockPage.country.should.be.equal('');            
         });

    });

    describe('Search page category', function() {

        var payload = {
            "pageType" : "category",
            "url" : "https://www.herroom.com/sleepwear.aspx",
            "html": cache.load("https://www.herroom.com/sleepwear.aspx")
        }
        it('should be true when number of items and pages correct', function () {

            var expected = JSON.stringify({
                "name": "",
                "url":""
            })

            const pagination = Structure(payload)

            JSON.stringify(pagination).should.equal(expected);
        });

    });

    describe('Search page pagination', function () {

                var payload = {
                    "pageType": "pagination",
                    "url": "https://www.herroom.com/sleepwear.aspx",
                    "html": cache.load("https://www.herroom.com/sleepwear.aspx")
                }

                it('should be true when number of items and pages correct', function () {

                    var expected = JSON.stringify({
                        "items": "",
                        "pages":"",
                        "url":""
                    })
        
                    const category = Structure(payload)
        
                    JSON.stringify(category).should.equal(expected);
                });        

            });


    describe('Search Page', function () {

        var payload = {
            "pageType": "search",
            "url": "https://www.herroom.com/sleepwear.aspx",
            "html": cache.load("https://www.herroom.com/sleepwear.aspx")
        }

        // Change to be the number of products on the page
        var x = 0;
        it('should return ' + x + ' numer of products', function () {
            let result = Structure(payload)
            result.length.should.equal(x);
        });

        var firstProductName = '';
        it('first product should be ' + firstProductName, function() {

            var expected = JSON.stringify({
                barcode: null,
                name: firstProductName,
                price: '',
                url: '',
                image: '',
                country: ''
            })
            
            let result = Structure(payload)

            var first = result.shift()
            
            JSON.stringify(first).should.equal(expected)

        })

        var lastProductName = '';
        it('last product should be ' + lastProductName, function () {
            var expected = JSON.stringify({
                barcode: null,
                name: lastProductName,
                price: '',
                url: '',
                image: '',
                country: ''
            })

            const result = Structure(payload);

            var last = result.pop()
            JSON.stringify(last).should.equal(expected)
        })

    }); 


});


