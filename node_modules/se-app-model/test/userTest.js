const should = require('should');
const expect = require('chai').expect;
const moment = require('moment');
const UserModel = require('../index.js').model.user;
const config = {
    db: "sm",
    host: "127.0.0.1",
    port: 27017
};

describe('#The User Model', function () {

    let user;

    beforeEach(() => {
        user = new UserModel(config);
    });

    after((done) => {
        done();
    });

    describe(':structure:', () => {
        it('should have a method for checking an affiliate record is valid', () => {
            expect(user).to.have.property('_validAffiliate');
            expect(user._validAffiliate).to.be.a('function');
        });
        it('should have a method for setExpiryDate');
        it('should have a method for setStripeSubscription');
        it('should have a method for getReferralCount');
        it('should have a method for setClaimedReferrals');
        it('should have a method for getAllApiKeys');
        it('should have a method for updateQuota');
        it('should have a method for getApiKey');
        it('should have a method for saveApiKeys');
        it('should have a method for findUserByName');
        it('should have a method for findUserByEmail');
        it('should have a method for findByStripeCustomerId');
        it('should have a method for findUserById');
        it('should have a method for findUserByToken');
        it('should have a method for checkExistingSellerId');
        it('should have a method for findBrandRestrictionsInfo');
        it('should have a method for checkPassword');
        it('should have a method for delResetToken');
        it('should have a method for addResetToken');
        it('should have a method for savePassword');
        it('should have a method for getAllUsers');
        it('should have a method for setReferralCode');
        it('should have a method for checkIfReferralCodeExists');
        it('should have a method for checkIfInfoExists');
        it('should have a method for getGlobalFilters');
        it('should have a method for saveGlobalFilters');
        it('should have a method for updateSentEmails');
        it('should have a method for updateApiStatus');
        it('should have a method for updateFirstTime');
        it('should have a method for registerUser');
        it('should have a method for updateLastFour');
        it('should have a method for updateSubscriptionEnd');
        it('should have a method for addInvoices');
        it('should have a method for getValidUsers');
    });

    describe('#_validAffiliate', () => {
        it('should return false if the affiliate is incomplete', () => {
            let result = user._validAffiliate({ affiliateCode: null, trackingCode: '', referrer: '', status: '' });
            expect(result).to.equal(false);
        });
        it('should return false if no affiliate record is provided', () => {
            let result = user._validAffiliate();
            expect(result).to.equal(false);
        });
        it('should return true if the affiliate record is complete', () => {
            let result = user._validAffiliate({ agency: 'leadDyno', affiliateCode: '123', trackingCode: '321', referrer: '111', status: 'ok' });
            expect(result).to.equal(true);
        });

    });

    describe('#setExpiryDate', () => { });
    describe('#setStripeSubscription', () => { });
    describe('#getReferralCount', () => { });
    describe('#setClaimedReferrals', () => { });
    describe('#getAllApiKeys', () => { });
    describe('#updateQuota', () => { });
    describe('#getApiKey', () => { });
    describe('#saveApiKeys', () => { });
    describe('#findUserByName', () => { });
    describe('#findUserByEmail', () => { });
    describe('#findByStripeCustomerId', () => { });
    describe('#findUserById', () => { });
    describe('#findUserByToken', () => { });
    describe('#checkExistingSellerId', () => { });
    describe('#findBrandRestrictionsInfo', () => { });
    describe('#checkPassword', () => { });
    describe('#delResetToken', () => { });
    describe('#addResetToken', () => { });
    describe('#savePassword', () => { });
    describe('#getAllUsers', () => { });
    describe('#setReferralCode', () => { });
    describe('#checkIfReferralCodeExists', () => { });
    describe('#checkIfInfoExists', () => { });
    describe('#getGlobalFilters', () => { });
    describe('#saveGlobalFilters', () => { });
    describe('#updateSentEmails', () => { });
    describe('#updateApiStatus', () => { });
    describe('#updateFirstTime', () => { });
    describe('#registerUser', () => { });
    describe('#updateLastFour', () => { });
    describe('#updateSubscriptionEnd', () => { });
    describe('#addInvoices', () => { });
    describe('#getValidUsers', () => { });

    // it('should return user API Key', function(done) {
    //         var User = new UserModel(config)

    //         User.getApiKey({
    //             country : "uk",
    //             userId: "596747ef51d4e00b8fc6a6e1"
    //         }, (err, result) => {
    //             should(err).be.equal(null)
    //             result.should.have.property('SellerId')
    //             result.should.have.property('MWSAuthToken')
    //             done();
    //         })

    // })

    // it('should save the keys', function(done){
    //     var User = new UserModel(config)

    //     User.saveApiKeys({
    //         availableCountry: [],
    //         country: "uk",
    //         signUpCountry: "us",
    //         userId: "5a575683b343175ad0632384",
    //         sellerId: "testNewKeys1",
    //         authToken: "testNewKeys1"

    //     }, (err, result) => {
    //         should(err).be.equal(null)
    //         done();
    //     })

    // })

    //  it('should save the keys', function(done){
    //     var User = new UserModel(config)

    //     User.findUserByName('mike', (err, result) => {
    //         should(err).be.equal(null)
    //         console.log(result)
    //         done();
    //     })

    // })

    // it('should Register the user to our database and check if username or email exists', function(done) {
    //     var User = new UserModel(config)

    //     User.registerUser({
    //         name: "testglobalfilters",
    //         password: "TestUser999",
    //         email: "testglobalfilters",
    //         username: "testglobalfilters",
    //         lastFour: 4444,
    //         plan: "ukLaunch",
    //         subscriptionEnd: "11/05/04",
    //         stripeId: "234234234234234",
    //         country: "uk"
    //     }, (err, result) => {
    //         console.log(err)
    //         should(err).be.equal(null)
    //         done();
    //     })
    // })

    // it('should add the invoices array to a customer', function(done) {
    //     var User = new UserModel(config)

    //     User.addInvoices({
    //         userId: "59d7427487964210752c9d22",
    //         invoices: [
    //             {
    //                 id: "invoice.id",
    //                 amount: "invoice.amount_due",
    //                 currency: "invoice.currency",
    //                 paid: "invoice.paid",
    //                 subscription: "invoice.subscription",
    //                 periodEnd: "invoice.period_end",
    //                 periodStart: "invoice.period_start"
    //             },
    //             {
    //                 id: "invoice.id909",
    //                 amount: "invoice.amount_due99",
    //                 currency: "invoice.currency99",
    //                 paid: "invoice.paid99",
    //                 subscription: "invoice.subscription99",
    //                 periodEnd: "invoice.period_end99",
    //                 periodStart: "invoice.period_start99"
    //             }

    //         ]
    //     }, (err, result) => {
    //         console.log(err)
    //         should(err).be.equal(null)
    //         done();
    //     })
    // })

    // it('should find user by Id', function(done) {
    //     var User = new UserModel(config)
    //     var id = "59d7441ca72cd410ca221c2f"

    //     User.findUserById(id, (err, result) => {
    //         console.log(result)
    //         should(err).be.equal(null)
    //         done();
    //     })
    // })

    // it('should check to see if username or email exists', function(done) {
    //     var User = new UserModel(config)
    //     User.checkIfInfoExists({
    //         username: "same232",
    //         email: "same232"

    //     }, (err, result) => {
    //         console.log(result)
    //         should(err).be.equal(null)
    //         done();
    //     })
    // })


    // it('should add the global filter values to the user ', function(done) {
    //     var User = new UserModel(config)
    //     User.saveGlobalFilters({
    //         addFbaCharges:1,
    //         addVat: 2,
    //         otherCosts: 3,
    //         coupon: 4,
    //         shippingFee: 5,
    //         fullfilmentFeesPerItem: 6,
    //         cashBackAmount: 7,
    //         userId: '59ef400059cd1c2ada1d27b9'
    //     }, (err, result) => {
    //         should(err).be.equal(null)
    //         done();
    //     })
    // })

    // it('should update the last four digits of our customers card', function(done) {
    //     var User = new UserModel(config)
    //     User.updateLastFour({
    //         userId: "59d5ef0b3eadc7635bf472ff",
    //         lastFour: "6666"

    //     }, (err, result) => {
    //         console.log(err)
    //         should(err).be.equal(null)
    //         done();
    //     })
    // })

    /*     it('should update the subscription end date for a user', function (done) {
                var User = new UserModel(config)
                var date = moment('1524911639', 'X').format('YYYY-MM-DD HH:MM:SS')
                //console.log(date)
                User.updateSubscriptionEnd({
                    userId: "5ab8fb6f4ef86f38d59c6cd3",
                    subscriptionEnd: date

                }, (err, result) => {
                    //console.log(err)
                    should(err).be.equal(null)
                    done();
                })
            }) */

    // it('should find a user by Email', function(done) {
    //     var User = new UserModel(config)

    //     User.findUserByEmail('martha@profitsourcery.com', (err, result) => {
    //         should(err).be.equal(null)
    //         console.log(result)
    //         done();
    //     })
    // })

    // it('should find a user by sellerId', function(done) {
    //     var User = new UserModel(config)

    //     User.checkExistingSellerId({
    //         sellerId: 'AUR7KXK1FWN5Q',
    //         country: 'us'
    //     }, (err, result) => {
    //         should(err).be.equal(null)
    //         console.log(result)
    //         done();
    //     })
    // })

    // it('should return true if password is correct', function(done){
    //     var User = new UserModel(config)

    //     User.checkPassword('mike', 'mikepassword', (err, result) => {
    //         should(err).be.equal(null)
    //         result.should.be.equal(true)
    //         done();
    //     })

    // })

    // it('should return false if password is incorrect', function(done){
    //     var User = new UserModel(config)

    //     User.checkPassword('mike', 'WRONGPASSWORD', (err, result) => {
    //         should(err).be.equal(null)
    //         result.should.be.equal(false)
    //         done();
    //     })

    // })

    // it('should return all the users', function(done) {
    //     var User = new UserModel(config)

    //     User.getAllUsers ({country: "UK"},
    //         (err, result) => {
    //         should(err).be.equal(null)
    //         console.log(result);
    //         done()
    //     })
    // })

    // it('should update the api status', function(done) {
    //     var User = new UserModel(config)
    //     User.updateApiStatus ({
    //         userId: '585d5951cc787451ccefab7e',
    //         status: false
    //     }, (err, result) => {
    //         should(err).be.equal(null)
    //         console.log(result)
    //         done()
    //     })
    // })

    // it('should get all the valid users', function(done) {
    //     var User = new UserModel(config)
    //         User.getValidUsers ({
    //             apiStatus: true
    //         }, (err, result) => {
    //             should(err).be.equal(null)
    //             console.log(result)
    //             done()
    //         })
    // })


})
