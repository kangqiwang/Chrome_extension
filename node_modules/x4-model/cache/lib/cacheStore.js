const redis = require("../../redis").handle

class cacheStore {

    constructor(config, type) {
        this.type = type
        this.redisStore = redis(config)
    }

    set(id, key, value)  {
        this.redisStore.hset(this.type + ":" + id, key, value)
    }

    get(id, key, next) {
        this.redisStore.hget(this.type + ":" + id, key, (err, data) => {
            next(err, data)
        })
    }

    getSome(id, keys, next) {
        this.redisStore.hmget(this.type + ":" + id, keys, (err, data) => {
            next(err, data)
        })
    }

    getAll(id, next) {
        this.redisStore.hgetall(this.type + ":" + id, (err, data) => {
            next(err, data)
        })
    }
    
    del(id, next) {
        this.redisStore.del(this.type + ":" + id, (err, data) => {
            next(err, data)
        })
    }

    getKeys(type, next) {
        this.result = []
        this.scan(this.redisStore, this.scan, this.result, type, 0, next)
    }

    scan(redisStore, thisScan, result, type, cursor, next) {

        redisStore.scan(cursor, 'MATCH', type + '*', 'COUNT', '10', function (err, reply) {
            if (err) {
                throw err;
            }
    
            cursor = reply[0];
            result = result.concat(reply[1])
    
            if (cursor === '0') {
                return next(null, result);
            } else {            
                thisScan(redisStore, thisScan, result, type, cursor, next);
            }
        });
    }

    rpush(list, key, data, next) {       
        this.redisStore.rpush(list, key);
    }

    exists(key, next) {
        this.redisStore.exists(key, next);
    }

    brpoplpush(list1, list2, next) {
        this.redisStore.brpoplpush(list1, list2, 0, next)
    }

    lrange(id, start, stop, next) {
        this.redisStore.lrange(id, start, stop, next)
    }

    incBy(id, key, inc, next) {
        this.redisStore.hincrby(storeName + id, key, inc, (err, data) => {
            next(err, data)
        })
    }

    sadd(id, key) {
        this.redisStore.sadd(storeName + id, key)
    }

}

module.exports = cacheStore