const handle = require('./handle')
const createIdKey = require('../createIdKey')
const mongodb = require('mongodb')

class Base {
    constructor(config, collection) {
        this.collection = collection
        this.config = config
    }

    /**
     * Return a null error if the mongo database is available and "NO_CONNECTION" if the database is down
     */
    ping(next) {
        let mongoServer = this.config.host + ' ' + this.config.port;
        const exec = require('child_process').exec;
        exec('nc -zv ' + mongoServer, (error, stdout, stderr) => {
            let result = error || stderr.indexOf('succeeded!') === -1 ? 'NO_CONNECTION' : null;
            next(result);
        });
    }

    stringToMongoId(str) {
        let result = null;
        if (str && str.length === 24) {
            result = mongodb.ObjectID(str);
        }
        return result;
    }

    count(query, next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err);
            } else {
                var collection = db.collection(this.collection);
                collection.count(query, (err, result) => {
                    next(err, result);
                    db.close();
                });
            }
        });
    }

    findIn(ids, next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err)
            } else {
                var collection = db.collection(this.collection)
                collection.find({ _id: { $in: ids } }).toArray((err, result) => {
                    next(err, result)
                    db.close()
                })
            }
        })
    }

    removeIn(ids, next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err)
            } else {
                var collection = db.collection(this.collection)
                collection.remove({ _id: { $in: ids } }, (err, result) => {
                    next(err, result)
                    db.close()
                })
            }
        })
    }

    checkCollection(next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err)
            } else {

                var dbNcol = this.config.db + '.' + this.collection

                db.collections((err, result) => {
                    if (err) {
                        next(err)
                    } else {
                        var found = false;
                        result.map(function (collec) {
                            if (collec.namespace === dbNcol) {
                                found = true;
                            }
                        })
                        next(null, found);
                    }
                    db.close()
                })
            }
        })
    }

    findById(id, next) {

        handle(this.config, (err, db) => {
            if (err) {
                next(err)
            } else {
                var collection = db.collection(this.collection)
                collection.findOne({
                    _id: mongodb.ObjectID(id)
                }, (err, result) => {
                    if (err) {
                        next(err)
                    } else {
                        if (result) {
                            result.id = result._id
                            delete result._id
                            next(null, result)
                        } else {
                            next(null, result)
                        }
                    }
                    db.close()
                })
            }
        })

    }

    findOne(payload, next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err)
            } else {
                var collection = db.collection(this.collection)
                collection.findOne(payload, (err, result) => {
                    if (err) {
                        next(err)
                    } else {
                        if (result) {
                            result.id = result._id
                            delete result._id
                            next(null, result)
                        } else {
                            next(null, result)
                        }
                    }
                    db.close()
                })
            }
        })
    }

    simpleFind(payload, next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err);
            } else {
                let collection = db.collection(this.collection);
                collection.find(payload).toArray(next);
            }
        });
    }

    find(payload, next) {

        var limit = payload.size
        var sort = payload.sort
        var skip = payload.start
        var fields = payload.fields

        delete payload.size
        delete payload.sort
        delete payload.start
        delete payload.fields

        handle(this.config, (err, db) => {
            if (err) {
                next(err)
            } else {
                var collection = db.collection(this.collection)
                var curs
                if (fields) {
                    curs = collection.find(payload, fields)
                } else {
                    curs = collection.find(payload)
                }

                curs.count((err, count) => {
                    if (err) {
                        next(err)
                        db.close()
                    } else {
                        if (sort) {
                            curs = curs.sort(sort)
                        }

                        if (skip) {
                            curs = curs.skip(skip)
                        }

                        if (limit) {
                            curs = curs.limit(limit)
                        }

                        curs.toArray((err, results) => {
                            if (err) {
                                next(err)
                            } else {
                                var records = this.remap(results)
                                if (this.config.createIdKey) {
                                    records = createIdKey('id', records)
                                }

                                next(null, {
                                    total: count,
                                    records: records
                                })
                            }
                            db.close()
                        })
                    }

                })
            }
        })
    }

    pagination(payload, next) {
        var start = payload.start !== undefined ? payload.start : 0
        var size = payload.size !== undefined ? payload.size : 10
        var newPayload = Object.assign({
            start: start,
            size: size
        }, payload)

        this.find(newPayload, (err, result) => {
            if (err) {
                next(err)
            } else {
                result.start = start;
                result.size = size;
                next(null, result)
            }
        })
    }

    remap(records) {
        var newRecords = []
        records.map((r) => {
            r.id = r._id
            delete r._id
            newRecords.push(r)
        })
        return newRecords
    }

    update(payload, next) {
        let flags = payload.flags ? payload.flags : {};
        handle(this.config, (err, db) => {
            if (err) {
                next(err)
            } else {
                var collection = db.collection(this.collection)
                collection.update(payload.query, payload.update, flags, (err, result) => {
                    next(err, result);
                    db.close()
                });
            }
        })
    }

    updateMany(payload, next) {
        let flags = payload.flags ? payload.flags : {};
        handle(this.config, (err, db) => {
            if (err) {
                next(err)
            } else {
                var collection = db.collection(this.collection)
                collection.updateMany(payload.query, payload.update, flags, (err, result) => {
                    next(err, result);
                    db.close()
                });
            }
        })
    }

    insert(payload, next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err)
            } else {
                var collection = db.collection(this.collection)
                collection.insert(payload, (err, result) => {
                    next(err, result);
                    db.close()
                });
            }
        })
    }

    insertMany(payload, next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err)
            } else {
                var collection = db.collection(this.collection)
                collection.insertMany(payload, (err, result) => {
                    next(err, result);
                    db.close()
                });
            }

        })
    }

    remove(payload, next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err)
            } else {
                var collection = db.collection(this.collection)
                collection.remove(payload, (err, result) => {
                    next(err, result);
                    db.close()
                });
            }
        })
    }

    delById(id, next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err)
            } else {
                var collection = db.collection(this.collection)
                collection.remove({ _id: mongodb.ObjectID(id) }, (err, result) => {
                    next(err, result);
                    db.close()
                });
            }
        })
    }

    findDuplicates(id, next) {
        handle(this.config, (err, db) => {
            if (err) {
                next(err)
            } else {
                var collection = db.collection(this.collection)

                collection.aggregate([
                    {
                        $group: {
                            _id: id,
                            uniqueIds: { $addToSet: "$_id" },
                            count: { $sum: 1 }
                        }
                    },
                    {
                        $match: {
                            count: { $gte: 2 }
                        }
                    },
                    { $sort: { count: -1 } },
                    { $limit: 10 }
                ], { allowDiskUse: true }, (err, result) => {
                    next(err, result)
                    db.close()
                });
            }
        })
    }

    getFreePort(payload, next) {
        var timestamp = new Date().toISOString();
        handle(this.config, (err, db) => {
            if (err) {
                next(err)
            } else {
                var collection = db.collection(this.collection)
                collection.findOneAndUpdate(
                    { free: true },
                    { $set: { free: false, timestamp: timestamp, search: payload } },
                    next);
            }
        });
    }

}

module.exports = Base
