const saisb = require('../lib/splitArrIntoSmallerBits');
const expect = require('chai').expect;

/**
 * Process an array into chunks defined as size maxLen.  Where an action/data boundary is broken
 * the array should be split on the following line ie maxLen + 1
 */
describe('SplitArrayIntoSmallerBits', () => {
    it('should take an array and chunk it into an array of parts', (done) => {
        let testData = [{ data: 'test', value: '1' }, { data: 'test', value: '2' }, { data: 'test', value: '3' }, { data: 'test', value: '4' }, { data: 'test', value: '5' }, { data: 'test', value: '6' }];
        let result = saisb(testData, 2);
        expect(result.length).to.equal(3);
        expect(result[1][0].value).to.equal('3');
        done();
    });
    it('should split an array given a size for each chunk', (done) => {
        let testData = [{ data: 'test', value: '1' }, { data: 'test', value: '2' }, { data: 'test', value: '3' }, { data: 'test', value: '4' }, { data: 'test', value: '5' }, { data: 'test', value: '6' }];
        let result = saisb(testData, 3);
        expect(result.length).to.equal(2);
        expect(result[1][0].value).to.equal('4');
        done();
    });
    it('should split the array but not break action/data boundaries', (done) => {
        let testData = [{ action: 'update' }, { data: 'test', value: '1' }, { action: 'update' }, { data: 'test', value: '2' }, { action: 'update' }, { data: 'test', value: '3' }];
        let result = saisb(testData, 3);
        expect(result.length).to.equal(2);
        expect(result[0].length).to.equal(4);
        expect(result[1].length).to.equal(2);
        done();
    });
    it('should split the array normally if the last action on the chunk is a "delete"', (done) => {
        let testData = [{ action: 'update' }, { data: 'test', value: '1' }, { action: 'delete' }, { action: 'delete' }, { action: 'update' }, { data: 'test', value: '3' }];
        let result = saisb(testData, 3);
        expect(result.length).to.equal(2);
        expect(result[0].length).to.equal(3);
        expect(result[1].length).to.equal(3);
        done();
    });
});
