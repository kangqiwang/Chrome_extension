let ProductPageInfo = require('../../lib/productPageInfo.js');
let SearchPageInfo = require('../../lib/searchPageInfo.js');
let PaginationNumberInfo = require('../../lib/paginationNumberInfo.js');
let CategoryInfo = require('../../lib/CategoryInfo.js');
let cleanName = require('../../lib/cleanName.js');
let getPrice = require('../../lib/getPrice.js');
let generateSku = require('../../lib/testPattern.js')
let regex = /\/([^\/]+)\/?$/

module.exports = replaceWithwebAddressChangeToCamelCase = {

    'sku': (url) => {
        let sku = generateSku(url, regex)[0].match('[0-9]+')[0]
        return sku
    },

    'product': function ($, next) {
        let info = new ProductPageInfo()
        info.name = Product.name($)
        info.inStock = Product.inStock($)
        info.price = Product.price($)
        info.image = Product.image($)
        info.country = 'us'
        info.description = Product.description($)
        return info
    },

    'search': function ($, next) {
        let result = []
        Search.container($).map(function (index, product) {
            let info = new SearchPageInfo()
            info.name = Search.name($, product);
            info.sku = generateSku(Search.url($, product), regex)[0].match('[0-9]+')[0]
            info.price = Search.price($, product);
            info.url = Search.url($, product);
            info.image = Search.image($, product);
            info.country = 'us';
            result.push(info)
        });
        return result
    },

    'pagination': function ($, next) {

        let info = new PaginationNumberInfo()
        info.items = Pagination.items($);
        info.pages = Pagination.pages($);
        console.timeStamp()
        return info
    },

    'category': function ($, next) {
        let info = new CategoryInfo()
        info.name = Category.name($);

        return info
    }
}

let Product = {
    name: function ($) {
        let name = $('h1.product-name').first().text();
        name = cleanName(name);

        return name;
    },
    inStock: function ($) {

        let oos = $('div.availability-box-section').text()

        if (oos.toLowerCase().indexOf('out of stock') > -1) {
            return false
        } else {
            return true
        }
    },
    price: function ($) {

        let discountPrice = $('.product-sales-price').first().text()
        discountPrice = getPrice(discountPrice)

        let stdPrice = $('div.product-header-right-row div.product-pricing span').text();
        stdPrice = getPrice(stdPrice)

        if (discountPrice && discountPrice != '') {
            return discountPrice
        } else {
            return stdPrice
        }
    },
    image: function ($) {
        let image = $('div.zoom_img_col1 img').attr('src');

        return image;
    },
    description: function ($) {
        let description = $('div.productshortDescriptions').text().replace(/\s+/g, " ").trim();

        return description;
    }
}

let Search = {
    container: function ($) {
        let product = $('li.grid-tile');

        return product;
    },
    name: function ($, product) {
        let name = $(product).find('a.name-link').attr('title');
        name = cleanName(name);

        return name;
    },
    price: function ($, product) {
        let price = $(product).find('span.product-sales-price').text();
        price = getPrice(price);
        return price;
    },
    url: function ($, product) {
        let url = $(product).find('a.name-link').attr('href');

        if (url.startsWith('https://www.michaels.com')) {
            return url
        } else {
            return 'https://www.michaels.com' + url
        }
    },
    image: function ($, product) {
        let image = $(product).find('a.thumb-link img').attr('src');

        return image;
    }
}

let Pagination = {

    items: function ($) {
        let items = $('li a.selected').text();
        items = JSON.parse(items);

        return items;
    },
    pages: function ($) {
        let items = $('li a.selected').text();
        let products = $('div.page-range').text().trim().match(/[0-9]+/g).pop();

        let pages = products / items;
        pages = Math.ceil(pages);

        return pages;
    }
}

let Category = {
    name: function ($) {
        let name = $('div.category-header h1').text();
        return name;
    }
}