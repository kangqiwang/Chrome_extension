const should = require('should');
const Activity = require('../index.js').model.activity;
const config = require('../config.js');
const moment = require('moment');
const expect = require('chai').expect;

describe('#The Activity Model', () => {

    let as;

    beforeEach(() => {
        as = new Activity(config.es);
    });

    describe('Searches', () => {

        it('should get Created Searches from date', (done) => {

            let startDate = moment().subtract(200, 'hours').toISOString();
            let endDate = moment().toISOString();

            as.getCreatedSearches(startDate, endDate, (err, result) => {
                should(err).be.equal(null);
                //console.log(result);
                done();
            });
        });

        it('should get Started Searches from date', (done) => {
            let startDate = moment().subtract(200, 'hours').toISOString();
            let endDate = moment().toISOString();

            as.getStartedSearches(startDate, endDate, (err, result) => {
                should(err).be.equal(null);
                //console.log(result);
                done();
            });
        });

        xit('should get All Searches by ID', (done) => {
            as.getByJobId("5adf12d23eabfb2841046200", (err, result) => {
                should(err).be.equal(null);
                result.length.should.be.equal(1);
                done();
            });
        });
    });

    describe('#getAffiliateTransactionsForUser', () => {
        it('should return an empty array when the userId has no entries in the database', (done) => {
            as.getAffiliateTransactionsForUser('', (err, data) => {
                expect(err).to.equal(null);
                expect(data).to.be.an('array');
                expect(data.length).to.equal(0);
                done();
            });
        });
        it('should find all affiliate transactions for a given user', (done) => {
            as.getAffiliateTransactionsForUser('5ad8b60f4486c4505fcf039c', (err, data) => {
                expect(err).to.equal(null);
                expect(data.length).to.be.above(0);
                done();
            });
        });
        it('should return an object with a timestamp and origin.type of webhook', (done) => {
            as.getAffiliateTransactionsForUser('5ad8b60f4486c4505fcf039c', (err, data) => {
                expect(err).to.equal(null);
                expect(data[0]).to.have.property('timestamp');
                expect(data[0]).to.have.property('origin');
                expect(data[0].origin).to.have.property('type');
                done();
            });
        });
    });

    describe('#getAffiliateTransactionByInvoice', () => {
        it('should find all affiliate activity records with a matching invoiceId', () => {
            as.getAffiliateTransactionByInvoice('4')
        });
    });

});
