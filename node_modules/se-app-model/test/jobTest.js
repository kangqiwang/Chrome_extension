const should = require('should');
const JobModel = require('../index.js').model.job
const config = {
                db: "sm",
                host: "127.0.0.1",
                port: 27017
            }

var jobId;

describe('Job Test', function() {

    this.timeout(10000)

    // it('should return save a job', (done) => {

    //   var Job = new JobModel(config)

    //   Job.save(saveTestPayload, (err, result) => {
    //       should(err).be.equal(null)
    //       result.status.should.be.equal('QUEUED')
    //       result.should.have.property('jobId')
    //       jobId = result.jobId
    //       done();
    //   })

    // })

    // it('should return jobs', (done) => {

    //   var Job = new JobModel(config)

    //   Job.pagination({
    //       size: 10,
    //       start: 0,
    //       userName: 'mike'
    //   }, (err, result) => {
    //       should(err).be.equal(null)
    //       result.should.have.property('total')
    //       result.should.have.property('records')
    //       result.total.should.be.equal(1)
    //       result.records.length.should.be.equal(1)
    //       done();
    //   })

    // })

    // it('should find one job', (done) => {
    //     var Job = new JobModel(config)
    //     var id = '59fb3aa617553d215e7c0d9a'
    //     Job.findJobById(id, (err, result) => {
    //               should(err).be.equal(null)
    //               done();
    //           })
    // })

    it('should find a job with a userId', (done) => {
        var Job = new JobModel(config)
        var userId = "5ae1b4c7da849e1b7efcc46e"

        Job.findAllJobsWithUserId(userId, (err, result) => {
            should(err).be.equal(null)
            console.log(result)
            done()
        })
    })


    // it('should delete a job and its searches', (done) => {

    //     var Job = new JobModel(config)

    //     Job.delById(jobId, (err, result) => {
    //         should(err).be.equal(null)
    //         done();
    //     })

    // })

    // it('should check it job is running for user', (done) => {
    //     var Job = new JobModel(config)

    //     Job.checkRunning({
    //       userId: ""
    //     }, (err, result) => {
    //         should(err).be.equal(null)
    //         console.log(result)
    //         done();
    //     })

    // })

})

var saveTestPayload = {
  "name": "6pm",
  "notes": "",
  "suppliers": {
    "checked": {
      "58593450d2b2122cab550eda": {
        "selected": true,
        "name": "6pm",
        "_id": "58593450d2b2122cab550eda"
      }
    }
  },
  "urls": [
    {
      "_id": "58d8e5b4a4525ad677f1cd41",
      "category": "backpacks",
      "supplierId": "58593450d2b2122cab550eda",
      "url": "http://www.6pm.com/backpacks/COjWARCQ1wHiAgIBAg.zso?s=isNew/desc/goLiveDate/desc/recentSalesStyle/desc/",
      "urlId": "da893d923eac15e1dfe9e59dab7ee0bd",
      "status": "SEARCH_PAGE",
      "lastRun": "2017-06-29T12:26:33.209Z"
    }
  ],
  "searchSettings": {
    "searchBy": {
      "barcode": 1,
      "all": 2
    },
    "matchType": {
      "regular": 1,
      "image": 2
    }
  },
  "filter": {
    "product": {
      "show": "show",
      "hideSubmit": "hide",
      "maxSalesRank": null,
      "keyWords": [
        ""
      ],
      "hasBuyBox": false,
      "noFBA": false,
      "maxSellers": null,
      "hideAmazonBuyBox": false,
      "noCompetition": false,
      "amazonRating": null
    },
    "financial": {
      "show": "show",
      "hideSubmit": "hide",
      "tax": null,
      "minRoi": null,
      "addFba": true,
      "shippingFee": null,
      "minAmazonPrice": null,
      "maxSupBuyPrice": null,
      "minProfit": null,
      "storageFee": null,
      "thirdPartyFee": null,
      "cashback": null
    }
  },
  "country": "us",
  "type": "SAVE_JOB",
  "userName": "mike",
  "userId": "585d5951cc787451ccefab7e"
}