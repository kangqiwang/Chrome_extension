const Base = require('../lib/es/base');

class Activity extends Base {

  constructor(config) {
    super(config, 'sm-activity-*');
  }

  getCreatedSearches(startDate, endDate, next) {
    this.search(this._buildTypeQuery('Create', startDate, endDate), next);
  }

  getStartedSearches(startDate, endDate, next) {
    this.search(this._buildTypeQuery('Start', startDate, endDate), next);
  }

  getByJobId(jobId, next) {
    this.search(this._buildJobQuery(jobId), next);
  }

  getSearchesByJobId(jobId, next) {
    this.search(this._buildSearchByJobQuery(jobId), next);
  }

  getDurationBySupplierId(supplierId, fastSearch, next) {
    this.search(this._buildSearchBySupplierId(supplierId, fastSearch), next);
  }

  getProgressForProcess(processName, next) {
    this.search(this._buildSearchForProgress(processName), next);
  }

  getAffiliateTransactionsForUser(userId, next) {
    this.search(this._buildAffiliateTransactionQuery(userId), next);
  }

  getAffiliateTransactionByInvoice(invoiceId, next){
    this.search(this._getAffiliateTransactionByInvoice(invoiceId), next);
  }

  _buildTypeQuery(type, startDate, endDate) {
    let q = {
      "size": 5000,
      "query": {
        "bool": {
          "must": [{
            "match": {
              "tag.type": "Search"
            }
          },
          {
            "match": {
              "type": type
            }
          }],
          "filter": {
            "range": {
              "timestamp": {
                "gte": startDate,
                "lte": endDate
              }
            }
          }
        },
      },
      "sort": [{
        "timestamp": {
          "order": "desc"
        }
      }]
    };
    return q;
  }

  _buildJobQuery(jobId) {
    return {
      "size": 1,
      "query": {
        "bool": {
          "must": [{
            "match": {
              "tag.type": "Search"
            }
          },
          {
            "match": {
              "object.jobId": jobId
            }
          }
          ]
        }
      },
      "sort": [{
        "timestamp": {
          "order": "desc"
        }
      }]
    };
  }

  _buildSearchByJobQuery(jobId) {
    return {
      "size": 10000,
      "query": {
        "bool": {
          "must": [{
            "match": {
              "tag.type": "Search"
            }
          },
          {
            "match": {
              "object.jobId": jobId
            }
          }
          ]
        }
      },
      "sort": [{
        "timestamp": {
          "order": "desc"
        }
      }]
    };
  }

  _buildSearchBySupplierId(supplierId, fastSearch) {
    return {
      "size": 1,
      "query": {
        "bool": {
          "must": [{
            "match": {
              "tag.type": "Job"
            }
          },
          {
            "match": {
              "object.supplierId": supplierId
            }
          },
          {
            "match": {
              "object.fastSearch": fastSearch
            }
          }
          ]
        }
      },
      "sort": [{
        "timestamp": {
          "order": "desc"
        }
      }]
    };
  }

  _buildSearchForProgress(processName) {
    let q = {
      "size": 1,
      "query": {
        "bool": {
          "must": [
            {
              "match": {
                "tag.type": "Search"
              }
            },
            {
              "match": {
                "type": "Start"
              }
            },
            {
              "match": {
                "object.name": processName
              }
            }
          ]
        }
      },
      "sort": [{
        "timestamp": {
          "order": "desc"
        }
      }]
    };
    return q;
  }

  _buildAffiliateTransactionQuery(userId) {
    let q = {
      "size": 100,
      "query": {
        "bool": {
          "must": [
            {
              "match": {
                "origin.type": "webhook"
              }
            },
            {
              "match": {
                "actor.id": userId
              }
            },
            {
              "match": {
                "target.type": "affiliateProgramme"
              }
            }
          ]
        }
      },
      "sort": [{
        "timestamp": {
          "order": "desc"
        }
      }]
    };
    return q;
  }

  _getAffiliateTransactionByInvoice(invoiceId) {
    let q = {
      "size": 1,
      "query": {
        "bool": {
          "must": [
            {
              "match": {
                "origin.type": "webhook"
              }
            },
            {
              "match": {
                "object.invoiceId": invoiceId
              }
            },
            {
              "match": {
                "origin.type": "createAffiliateLead"
              }
            }
          ]
        }
      },
      "sort": [{
        "timestamp": {
          "order": "desc"
        }
      }]
    };
    return q;
  }
}

module.exports = Activity;
