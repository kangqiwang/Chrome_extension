var ProductPageInfo = require ('../../lib/productPageInfo.js');
var SearchPageInfo = require ('../../lib/searchPageInfo.js');
var PaginationNumberInfo = require  ('../../lib/paginationNumberInfo.js');
var CategoryInfo = require ('../../lib/CategoryInfo.js');
var cleanName = require('../../lib/cleanName.js');
var getPrice = require('../../lib/getPrice.js');

module.exports = replaceWithwebAddressChangeToCamelCase =  {

    'sku': (url) => {
        return url.substring(url.lastIndexOf("=")+1,url.lastIndexOf(""))
    },

    'product' : function($, next) {
        // product - Returns product information for provided url
        var info  = new ProductPageInfo()
        info.name = Product.name($)
        info.inStock = Product.inStock($)
        info.price = Product.price($)
        info.image = Product.image($)
        info.country = 'uk'
        info.description = Product.description($)

        return info
    },

    'search' : function($, next) {
        // search -  Returns an array of products from the suppliers search page
        var result = []

        Search.container($).map(function(index, product) {
            var info = new SearchPageInfo()
            info.name = Search.name($, product);
            info.sku = Search.url($, product).substring(Search.url($, product).lastIndexOf("=")+1,Search.url($, product).lastIndexOf(""));
            info.price = Search.price($, product);
            info.url = Search.url($, product);
            info.image = Search.image($, product);
            info.country = 'uk';
            result.push(info)
        });

        return result
    },

    'pagination' : function ($, next) {

        var info = new PaginationNumberInfo()
        info.items = Pagination.items($);
        info.pages = Pagination.pages($);

        return info
    },
    'category' : function($, next) {
        var info = new CategoryInfo()
        info.name = Category.name($);

        return info
    }
}

var Product = {
    name: function($) {
        return cleanName($('div.accessoriesDetail-header p.accessoriesDetail-itemName').text());
    },
    inStock: function($) {
return 'unchecked'
},
    price: function($) {
        return getPrice($('div.accessoriesDetail-priceBlock p.accessoriesDetail-priceBlock-labels span').text());
    },
    image: function($) {
        return "http://shop.lenovo.com" + $('a.cloud-zoom img').attr('src');
    },
    description: function($) {
        return $('div.accessoriesDetail-tabbedInfo section').text().trim().replace(/\r/g, "");
    }
}

var Search = {
    container: function($) {
        return $("div.nonHighlightedProduct");
    },
    name: function($, product) {
        return cleanName($(product).find("article.titleDescWrap h2").text());
    },
    price: function($, product) {
        return getPrice($(product).find("dd.saleprice").text());
    },
    url: function($, product) {
        return $(product).find("article.titleDescWrap a").attr("href");
    },
    image: function($, product) {
        return image = $(product).find("div.productImageWrap a img").attr("src");   
    }
}

// var Pagination = {
//      items: function($) {


//      },
//      pages: function($) {

//      }
// }

var Category = {
    name: function($) {
        return cleanName($("div.bar_3-innerWrapper h1.bar_3-heading").text());
    }
}