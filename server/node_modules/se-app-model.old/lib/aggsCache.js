const moment = require('moment');
const mainCache = require('./mainCache');

let cache;

const _saveCache = (keyName, cache, done) => {
    let timeStamp = new Date();
    cache.timeStamp = timeStamp;
    console.log('updated Cache: ', cache);
    mainCache.set(keyName, cache);
    done();
};

const _getCache = (query, model, done) => {
    model.findAggs(query, done);
};

const _refreshCache = (keyName, model, query, done) => {

    _getCache(query, model, (err, newCache) => {
        if (newCache && newCache.aggs && Object.keys(newCache.aggs).length > 1) {
            console.log('Updating cache from database');
            _saveCache(keyName, newCache, () => {
                done(null, newCache);
            });
        } else {
            console.log('err: ', err);
            console.log('newCache: ', newCache);
            if (cache) {
                done(null, cache);
            } else {
                done('NO CACHE');
            }
        }
    });
};

module.exports = (model, payload, next) => {

    let keyName = 'AggsCacheData_' + payload.country;

    cache = mainCache.get(keyName) || false;

    if (cache && cache.timeStamp) {
        if (parseInt(moment().diff(moment(cache.timeStamp), payload.cacheAgeUnits)) >= parseInt(payload.cacheAgeValue)) {
            console.log('Reloading cache from DB');
            _refreshCache(keyName, model, payload.query, () => { console.log('this was called!'); });
        }
        console.log('sending cached data');
        next(null, cache);
    } else {
        // First run
        console.log('Loading cache for first time');
        _refreshCache(keyName, model, payload.query, next);
    }

};
